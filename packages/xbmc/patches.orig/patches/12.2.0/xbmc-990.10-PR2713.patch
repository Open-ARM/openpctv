From 1c12a2f021cceee0d7eee2de5df993d73d790aa5 Mon Sep 17 00:00:00 2001
From: Cory Fields <theuni-nospam-@xbmc.org>
Date: Thu, 9 May 2013 19:27:14 -0400
Subject: [PATCH 1/2] texture: combine Load() and GetTexture() since they must
 be used together

---
 xbmc/guilib/GUITexture.cpp     | 19 ++++++++--------
 xbmc/guilib/TextureManager.cpp | 51 ++++++++++++++++++++----------------------
 xbmc/guilib/TextureManager.h   |  3 +--
 3 files changed, 34 insertions(+), 39 deletions(-)

diff --git a/xbmc/guilib/GUITexture.cpp b/xbmc/guilib/GUITexture.cpp
index 9da2030..5896606 100644
--- a/xbmc/guilib/GUITexture.cpp
+++ b/xbmc/guilib/GUITexture.cpp
@@ -301,11 +301,12 @@ bool CGUITextureBase::AllocResources()
   { // we want to use the large image loader, but we first check for bundled textures
     if (!IsAllocated())
     {
-      int images = g_TextureManager.Load(m_info.filename, true);
-      if (images)
+      CTextureArray texture;
+      texture = g_TextureManager.Load(m_info.filename, true);
+      if (texture.size())
       {
         m_isAllocated = NORMAL;
-        m_texture = g_TextureManager.GetTexture(m_info.filename);
+        m_texture = texture;
         changed = true;
       }
     }
@@ -329,15 +330,14 @@ bool CGUITextureBase::AllocResources()
   }
   else if (!IsAllocated())
   {
-    int images = g_TextureManager.Load(m_info.filename);
+    CTextureArray texture = g_TextureManager.Load(m_info.filename);
 
     // set allocated to true even if we couldn't load the image to save
     // us hitting the disk every frame
-    m_isAllocated = images ? NORMAL : NORMAL_FAILED;
-    if (!images)
+    m_isAllocated = texture.size() ? NORMAL : NORMAL_FAILED;
+    if (!texture.size())
       return false;
-
-    m_texture = g_TextureManager.GetTexture(m_info.filename);
+    m_texture = texture;
     changed = true;
   }
   m_frameWidth = (float)m_texture.m_width;
@@ -346,8 +346,7 @@ bool CGUITextureBase::AllocResources()
   // load the diffuse texture (if necessary)
   if (!m_info.diffuse.IsEmpty())
   {
-    g_TextureManager.Load(m_info.diffuse);
-    m_diffuse = g_TextureManager.GetTexture(m_info.diffuse);
+    m_diffuse = g_TextureManager.Load(m_info.diffuse);
   }
 
   CalculateSize();
diff --git a/xbmc/guilib/TextureManager.cpp b/xbmc/guilib/TextureManager.cpp
index 93fdcd1..6d6c4d9 100644
--- a/xbmc/guilib/TextureManager.cpp
+++ b/xbmc/guilib/TextureManager.cpp
@@ -221,22 +221,6 @@ void CTextureMap::Add(CBaseTexture* texture, int delay)
   Cleanup();
 }
 
-const CTextureArray& CGUITextureManager::GetTexture(const CStdString& strTextureName)
-{
-  static CTextureArray emptyTexture;
-  //  CLog::Log(LOGINFO, " refcount++ for  GetTexture(%s)\n", strTextureName.c_str());
-  for (int i = 0; i < (int)m_vecTextures.size(); ++i)
-  {
-    CTextureMap *pMap = m_vecTextures[i];
-    if (pMap->GetName() == strTextureName)
-    {
-      //CLog::Log(LOGDEBUG, "Total memusage %u", GetMemoryUsage());
-      return pMap->GetTexture();
-    }
-  }
-  return emptyTexture;
-}
-
 /************************************************************************/
 /*                                                                      */
 /************************************************************************/
@@ -290,19 +274,32 @@ bool CGUITextureManager::HasTexture(const CStdString &textureName, CStdString *p
   return !fullPath.IsEmpty();
 }
 
-int CGUITextureManager::Load(const CStdString& strTextureName, bool checkBundleOnly /*= false */)
+const CTextureArray& CGUITextureManager::Load(const CStdString& strTextureName, bool checkBundleOnly /*= false */)
 {
   CStdString strPath;
+  static CTextureArray emptyTexture;
   int bundle = -1;
   int size = 0;
   if (!HasTexture(strTextureName, &strPath, &bundle, &size))
-    return 0;
+    return emptyTexture;
 
   if (size) // we found the texture
-    return size;
+  {
+    for (int i = 0; i < (int)m_vecTextures.size(); ++i)
+    {
+      CTextureMap *pMap = m_vecTextures[i];
+      if (pMap->GetName() == strTextureName)
+      {
+        //CLog::Log(LOGDEBUG, "Total memusage %u", GetMemoryUsage());
+        return pMap->GetTexture();
+      }
+    }
+    // Whoops, not there.
+    return emptyTexture;
+  }
 
   if (checkBundleOnly && bundle == -1)
-    return 0;
+    return emptyTexture;
 
   //Lock here, we will do stuff that could break rendering
   CSingleLock lock(g_graphicsContext);
@@ -327,7 +324,7 @@ int CGUITextureManager::Load(const CStdString& strTextureName, bool checkBundleO
         CLog::Log(LOGERROR, "Texture manager unable to load bundled file: %s", strTextureName.c_str());
         delete [] pTextures;
         delete [] Delay;
-        return 0;
+        return emptyTexture;
       }
 
       pMap = new CTextureMap(strTextureName, width, height, nLoops);
@@ -348,7 +345,7 @@ int CGUITextureManager::Load(const CStdString& strTextureName, bool checkBundleO
         CStdString rootPath = strPath.Left(g_SkinInfo->Path().GetLength());
         if (0 == rootPath.CompareNoCase(g_SkinInfo->Path()))
           CLog::Log(LOGERROR, "Texture manager unable to load file: %s", strPath.c_str());
-        return 0;
+        return emptyTexture;
       }
       int iWidth = AnimatedGifSet.FrameWidth;
       int iHeight = AnimatedGifSet.FrameHeight;
@@ -386,7 +383,7 @@ int CGUITextureManager::Load(const CStdString& strTextureName, bool checkBundleO
 #endif
 
     m_vecTextures.push_back(pMap);
-    return 1;
+    return pMap->GetTexture();
   } // of if (strPath.Right(4).ToLower()==".gif")
 
   CBaseTexture *pTexture = NULL;
@@ -396,19 +393,19 @@ int CGUITextureManager::Load(const CStdString& strTextureName, bool checkBundleO
     if (!m_TexBundle[bundle].LoadTexture(strTextureName, &pTexture, width, height))
     {
       CLog::Log(LOGERROR, "Texture manager unable to load bundled file: %s", strTextureName.c_str());
-      return 0;
+      return emptyTexture;
     }
   }
   else
   {
     pTexture = CBaseTexture::LoadFromFile(strPath);
     if (!pTexture)
-      return 0;
+      return emptyTexture;
     width = pTexture->GetWidth();
     height = pTexture->GetHeight();
   }
 
-  if (!pTexture) return 0;
+  if (!pTexture) return emptyTexture;
 
   CTextureMap* pMap = new CTextureMap(strTextureName, width, height, 0);
   pMap->Add(pTexture, 100);
@@ -423,7 +420,7 @@ int CGUITextureManager::Load(const CStdString& strTextureName, bool checkBundleO
   OutputDebugString(temp);
 #endif
 
-  return 1;
+  return pMap->GetTexture();
 }
 
 
diff --git a/xbmc/guilib/TextureManager.h b/xbmc/guilib/TextureManager.h
index c982e6a..22fc192 100644
--- a/xbmc/guilib/TextureManager.h
+++ b/xbmc/guilib/TextureManager.h
@@ -108,8 +108,7 @@ class CGUITextureManager
 
   bool HasTexture(const CStdString &textureName, CStdString *path = NULL, int *bundle = NULL, int *size = NULL);
   bool CanLoad(const CStdString &texturePath) const; ///< Returns true if the texture manager can load this texture
-  int Load(const CStdString& strTextureName, bool checkBundleOnly = false);
-  const CTextureArray& GetTexture(const CStdString& strTextureName);
+  const CTextureArray& Load(const CStdString& strTextureName, bool checkBundleOnly = false);
   void ReleaseTexture(const CStdString& strTextureName);
   void Cleanup();
   void Dump() const;
-- 
1.8.1.6


From ece7ac520231ff144d7bc4d8393d1ca36f227927 Mon Sep 17 00:00:00 2001
From: Cory Fields <theuni-nospam-@xbmc.org>
Date: Tue, 30 Apr 2013 23:01:57 -0400
Subject: [PATCH 2/2] texture: two texture speedups

1. Check to see if we have a texture loaded already before opening/uploading
   another instance of it.

2. Set a time-out for deleting textures. If they are needed again before the
   time-out expires, they are re-added to the loaded textures array and ready
   for use again. Otherwise, they are deleted after X msec. This helps to avoid
   doing _really_ nasty things, like re-loading the background image when
   moving from home to settings.
---
 xbmc/Application.cpp           |  2 +-
 xbmc/guilib/TextureManager.cpp | 30 +++++++++++++++++++++++++-----
 xbmc/guilib/TextureManager.h   |  6 ++++--
 3 files changed, 30 insertions(+), 8 deletions(-)

diff --git a/xbmc/Application.cpp b/xbmc/Application.cpp
index 37d17e3..df456ec 100644
--- a/xbmc/Application.cpp
+++ b/xbmc/Application.cpp
@@ -4953,7 +4953,7 @@ void CApplication::ProcessSlow()
   if (!IsPlayingVideo())
     g_largeTextureManager.CleanupUnusedImages();
 
-  g_TextureManager.FreeUnusedTextures();
+  g_TextureManager.FreeUnusedTextures(5000);
 
 #ifdef HAS_DVD_DRIVE
   // checks whats in the DVD drive and tries to autostart the content (xbox games, dvd, cdda, avi files...)
diff --git a/xbmc/guilib/TextureManager.cpp b/xbmc/guilib/TextureManager.cpp
index 6d6c4d9..f214489 100644
--- a/xbmc/guilib/TextureManager.cpp
+++ b/xbmc/guilib/TextureManager.cpp
@@ -29,6 +29,7 @@
 #ifdef _DEBUG
 #include "utils/TimeUtils.h"
 #endif
+#include "threads/SystemClock.h"
 #include "filesystem/File.h"
 #include "filesystem/Directory.h"
 #include "URL.h"
@@ -298,6 +299,17 @@ bool CGUITextureManager::HasTexture(const CStdString &textureName, CStdString *p
     return emptyTexture;
   }
 
+  for (ilistUnused i = m_unusedTextures.begin(); i != m_unusedTextures.end(); i++)
+  {
+    CTextureMap* pMap = i->first;
+    if (pMap->GetName() == strTextureName)
+    {
+      m_vecTextures.push_back(pMap);
+      m_unusedTextures.erase(i);
+      return pMap->GetTexture();
+    }
+  }
+
   if (checkBundleOnly && bundle == -1)
     return emptyTexture;
 
@@ -439,7 +451,7 @@ void CGUITextureManager::ReleaseTexture(const CStdString& strTextureName)
       {
         //CLog::Log(LOGINFO, "  cleanup:%s", strTextureName.c_str());
         // add to our textures to free
-        m_unusedTextures.push_back(pMap);
+        m_unusedTextures.push_back(make_pair(pMap, XbmcThreads::SystemClockMillis()));
         i = m_vecTextures.erase(i);
       }
       return;
@@ -449,12 +461,20 @@ void CGUITextureManager::ReleaseTexture(const CStdString& strTextureName)
   CLog::Log(LOGWARNING, "%s: Unable to release texture %s", __FUNCTION__, strTextureName.c_str());
 }
 
-void CGUITextureManager::FreeUnusedTextures()
+void CGUITextureManager::FreeUnusedTextures(unsigned int timeDelay)
 {
+  unsigned int currFrameTime = XbmcThreads::SystemClockMillis();
   CSingleLock lock(g_graphicsContext);
-  for (ivecTextures i = m_unusedTextures.begin(); i != m_unusedTextures.end(); ++i)
-    delete *i;
-  m_unusedTextures.clear();
+  for (ilistUnused i = m_unusedTextures.begin(); i != m_unusedTextures.end();)
+  {
+    if (currFrameTime - i->second >= timeDelay)
+    {
+      delete i->first;
+      i = m_unusedTextures.erase(i);
+    }
+    else
+      i++;
+  }
 
 #if defined(HAS_GL) || defined(HAS_GLES)
   for (unsigned int i = 0; i < m_unusedHwTextures.size(); ++i)
diff --git a/xbmc/guilib/TextureManager.h b/xbmc/guilib/TextureManager.h
index 22fc192..2633c39d 100644
--- a/xbmc/guilib/TextureManager.h
+++ b/xbmc/guilib/TextureManager.h
@@ -27,6 +27,7 @@
 #define GUILIB_TEXTUREMANAGER_H
 
 #include <vector>
+#include <list>
 #include "TextureBundle.h"
 #include "threads/CriticalSection.h"
 
@@ -121,13 +122,14 @@ class CGUITextureManager
   void SetTexturePath(const CStdString &texturePath);    ///< Set a single path as the path to check when loading media (clear then add)
   void RemoveTexturePath(const CStdString &texturePath); ///< Remove a path from the paths to check when loading media
 
-  void FreeUnusedTextures(); ///< Free textures (called from app thread only)
+  void FreeUnusedTextures(unsigned int timeDelay = 0); ///< Free textures (called from app thread only)
   void ReleaseHwTexture(unsigned int texture);
 protected:
   std::vector<CTextureMap*> m_vecTextures;
-  std::vector<CTextureMap*> m_unusedTextures;
+  std::list<std::pair<CTextureMap*, unsigned int> > m_unusedTextures;
   std::vector<unsigned int> m_unusedHwTextures;
   typedef std::vector<CTextureMap*>::iterator ivecTextures;
+  typedef std::list<std::pair<CTextureMap*, unsigned int> >::iterator ilistUnused;
   // we have 2 texture bundles (one for the base textures, one for the theme)
   CTextureBundle m_TexBundle[2];
 
-- 
1.8.1.6

