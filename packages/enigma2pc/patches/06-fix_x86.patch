diff --git a/lib/base/smartptr.h b/lib/base/smartptr.h
index bcad74d..244546e 100644
--- a/lib/base/smartptr.h
+++ b/lib/base/smartptr.h
@@ -6,8 +6,6 @@
 #include <string.h>
 #include <lib/python/swig.h>
 
-inline void ptrAssert(void *p) { if (!p) *(unsigned long*)0=0; }
-
 template<class T>
 class ePtr
 {
@@ -54,16 +52,16 @@ public:
 	/* Horribly misnamed now, but why waste >9 bytes on each object just
 	 * to satisfy one ServiceEventTracker which doesn't even care about
 	 * the actual type it returns. */
-	intptr_t getPtrString() const
+	unsigned int getPtrString() const
 	{
-		return (intptr_t)ptr;
+		return (unsigned long)ptr;
 	}
 #ifndef SWIG
 	T* grabRef() { if (!ptr) return 0; ptr->AddRef(); return ptr; }
-	T* &ptrref() { ASSERT(!ptr); return ptr; }
+	T* &ptrref() { return ptr; }
 	operator bool() const { return !!this->ptr; }
 #endif
-	T* operator->() const { ptrAssert(ptr); return ptr; }
+	T* operator->() const { return ptr; }
 	operator T*() const { return this->ptr; }
 };
 
@@ -135,9 +133,9 @@ public:
 	}
 #ifndef SWIG
 	T* grabRef() { if (!ptr) return 0; ptr->AddRef(); ptr->AddUse(); return ptr; }
-	T* &ptrref() { ASSERT(!ptr); return ptr; }
+	T* &ptrref() { return ptr; }
 #endif
-	T* operator->() const { ptrAssert(ptr); return ptr; }
+	T* operator->() const { return ptr; }
 	operator T*() const { return this->ptr; }
 };
 
@@ -180,12 +178,12 @@ public:
 		ePtr<T>::operator=(c);
 		return *this;
 	}
-	ePtrHelper<T> operator->() { ptrAssert(ptr); return ePtrHelper<T>(ptr); }
+	ePtrHelper<T> operator->() { return ePtrHelper<T>(ptr); }
 			/* for const objects, we don't need the helper, as they can't */
 			/* be changed outside the program flow. at least this is */
 			/* what the compiler assumes, so in case you're using const */
 			/* eMutablePtrs note that they have to be const. */
-	const T* operator->() const { ptrAssert(ptr); return ptr; }
+	const T* operator->() const { return ptr; }
 };
 #endif
 
