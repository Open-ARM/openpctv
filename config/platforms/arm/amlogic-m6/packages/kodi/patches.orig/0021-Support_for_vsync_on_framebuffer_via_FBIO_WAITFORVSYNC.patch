diff --git a/xbmc/windowing/egl/EGLNativeTypeAmlogic.cpp b/xbmc/windowing/egl/EGLNativeTypeAmlogic.cpp
index b6551ea..efed12f 100644
--- a/xbmc/windowing/egl/EGLNativeTypeAmlogic.cpp
+++ b/xbmc/windowing/egl/EGLNativeTypeAmlogic.cpp
@@ -43,10 +43,16 @@ CEGLNativeTypeAmlogic::CEGLNativeTypeAmlogic()
     m_framebuffer_name = framebuffer.substr(start);
   }
   m_nativeWindow = NULL;
+
+  std::string framebuffer = "/dev/" + m_framebuffer_name;
+  m_framebuffer_fd = open(framebuffer.c_str(), O_RDWR);
 }
 
 CEGLNativeTypeAmlogic::~CEGLNativeTypeAmlogic()
 {
+  if (m_framebuffer_fd >= 0) {
+    close(m_framebuffer_fd);
+  }
 }
 
 bool CEGLNativeTypeAmlogic::CheckCompatibility()
@@ -290,15 +296,14 @@ void CEGLNativeTypeAmlogic::SetFramebufferResolution(const RESOLUTION_INFO &res)
   SetFramebufferResolution(res.iScreenWidth, res.iScreenHeight);
 }
 
+
 void CEGLNativeTypeAmlogic::SetFramebufferResolution(int width, int height) const
 {
-  int fd0;
-  std::string framebuffer = "/dev/" + m_framebuffer_name;
-
-  if ((fd0 = open(framebuffer.c_str(), O_RDWR)) >= 0)
+  // revert display axis
+  if (m_framebuffer_fd >= 0)
   {
     struct fb_var_screeninfo vinfo;
-    if (ioctl(fd0, FBIOGET_VSCREENINFO, &vinfo) == 0)
+    if (ioctl(m_framebuffer_fd, FBIOGET_VSCREENINFO, &vinfo) == 0)
     {
       vinfo.xres = width;
       vinfo.yres = height;
@@ -306,9 +311,8 @@ void CEGLNativeTypeAmlogic::SetFramebufferResolution(int width, int height) cons
       vinfo.yres_virtual = 2160;
       vinfo.bits_per_pixel = 32;
       vinfo.activate = FB_ACTIVATE_ALL;
-      ioctl(fd0, FBIOPUT_VSCREENINFO, &vinfo);
+      ioctl(m_framebuffer_fd, FBIOPUT_VSCREENINFO, &vinfo);
     }
-    close(fd0);
   }
 }
 
@@ -318,3 +322,9 @@ bool CEGLNativeTypeAmlogic::IsHdmiConnected() const
   aml_get_sysfs_str("/sys/class/amhdmitx/amhdmitx0/hpd_state", hpd_state, 2);
   return hpd_state[0] == '1';
 }
+
+void CEGLNativeTypeAmlogic::WaitVSync()
+{
+  int arg = 0;
+  ioctl(m_framebuffer_fd, FBIO_WAITFORVSYNC, &arg);
+}
diff --git a/xbmc/windowing/egl/EGLNativeTypeAmlogic.h b/xbmc/windowing/egl/EGLNativeTypeAmlogic.h
index 2e52b7e..03f9988 100644
--- a/xbmc/windowing/egl/EGLNativeTypeAmlogic.h
+++ b/xbmc/windowing/egl/EGLNativeTypeAmlogic.h
@@ -46,6 +46,7 @@ class CEGLNativeTypeAmlogic : public CEGLNativeType
   virtual bool  GetPreferredResolution(RESOLUTION_INFO *res) const;
 
   virtual bool  ShowWindow(bool show);
+  virtual void  WaitVSync();
 
 protected:
   bool SetDisplayResolution(const char *resolution);
@@ -58,4 +59,5 @@ class CEGLNativeTypeAmlogic : public CEGLNativeType
   bool IsHdmiConnected() const;
 
   std::string m_framebuffer_name;
+  int         m_framebuffer_fd;
 };
